
Review_102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000045c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080005f4  080005f4  000015f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005fc  080005fc  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  080005fc  080005fc  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005fc  080005fc  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005fc  080005fc  000015fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000600  08000600  00001600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000604  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08000610  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08000610  000020b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000167e  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000611  00000000  00000000  000036ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00003cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a7  00000000  00000000  00003f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014532  00000000  00000000  000040c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002540  00000000  00000000  000185f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081da7  00000000  00000000  0001ab39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c8e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000810  00000000  00000000  0009c924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  0009d134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005dc 	.word	0x080005dc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080005dc 	.word	0x080005dc

080001d8 <delay_init>:
int rx_index = 0;
int rx_amount = 0;

#define GPIOD_BASE_ADDRESS 0x40020c00
#define GPIOA_BASE_ADDRESS 0x40020000
void delay_init(){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    // int systick
    *SYST_RV = 16000/8 - 1;
 80001dc:	4b08      	ldr	r3, [pc, #32]	@ (8000200 <delay_init+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80001e4:	601a      	str	r2, [r3, #0]
    *SYST_CR |= 1 | ( 1<< 1);
 80001e6:	4b07      	ldr	r3, [pc, #28]	@ (8000204 <delay_init+0x2c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <delay_init+0x2c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f042 0203 	orr.w	r2, r2, #3
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	20000004 	.word	0x20000004
 8000204:	20000000 	.word	0x20000000

08000208 <delay>:

void delay(unsigned int time){
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	tick = 0;
 8000210:	4b0b      	ldr	r3, [pc, #44]	@ (8000240 <delay+0x38>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
    while ((tick < time));
 8000216:	bf00      	nop
 8000218:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <delay+0x38>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	687a      	ldr	r2, [r7, #4]
 800021e:	429a      	cmp	r2, r3
 8000220:	d8fa      	bhi.n	8000218 <delay+0x10>
    *SYST_CR &= ~1;
 8000222:	4b08      	ldr	r3, [pc, #32]	@ (8000244 <delay+0x3c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <delay+0x3c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f022 0201 	bic.w	r2, r2, #1
 8000230:	601a      	str	r2, [r3, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	20000028 	.word	0x20000028
 8000244:	20000000 	.word	0x20000000

08000248 <Led_init>:
void Systick_Handler(){
    tick++;
    *SYST_CR &= ~(1 << 16);
}

void Led_init(){
 8000248:	b480      	push	{r7}
 800024a:	b085      	sub	sp, #20
 800024c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800024e:	2300      	movs	r3, #0
 8000250:	607b      	str	r3, [r7, #4]
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <Led_init+0x5c>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000256:	4a13      	ldr	r2, [pc, #76]	@ (80002a4 <Led_init+0x5c>)
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	6313      	str	r3, [r2, #48]	@ 0x30
 800025e:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <Led_init+0x5c>)
 8000260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOD_BASE_ADDRESS + 0x00);
 800026a:	4b0f      	ldr	r3, [pc, #60]	@ (80002a8 <Led_init+0x60>)
 800026c:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOD_OTYPER = (uint32_t*) (GPIOD_BASE_ADDRESS + 0x04);
 800026e:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <Led_init+0x64>)
 8000270:	60bb      	str	r3, [r7, #8]
	*GPIOD_MODER &= ~(0xff << 24);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]
	*GPIOD_OTYPER &= ~(0xf << 12);
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40020c00 	.word	0x40020c00
 80002ac:	40020c04 	.word	0x40020c04

080002b0 <Button_init>:

void Button_init(){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <Button_init+0x50>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002be:	4a10      	ldr	r2, [pc, #64]	@ (8000300 <Button_init+0x50>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <Button_init+0x50>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOD_MODER = (uint32_t*) (GPIOA_BASE_ADDRESS + 0x00);
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <Button_init+0x54>)
 80002d4:	60fb      	str	r3, [r7, #12]
	uint32_t* GPIOD_PUPDR = (uint32_t*) (GPIOA_BASE_ADDRESS + 0x0c);
 80002d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <Button_init+0x58>)
 80002d8:	60bb      	str	r3, [r7, #8]
	*GPIOD_MODER &= ~(0b11); // Set PA0 in input mode
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f023 0203 	bic.w	r2, r3, #3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	601a      	str	r2, [r3, #0]
	*GPIOD_PUPDR &= ~(0b11);
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f023 0203 	bic.w	r2, r3, #3
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	601a      	str	r2, [r3, #0]
}
 80002f2:	bf00      	nop
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800
 8000304:	40020000 	.word	0x40020000
 8000308:	4002000c 	.word	0x4002000c

0800030c <Led_control>:

typedef enum{
	ON, OFF
}Led_state_t;

void Led_control(int led_num, Led_state_t state){
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	70fb      	strb	r3, [r7, #3]
	uint32_t* GPIOD_ODR = (uint32_t*) (GPIOD_BASE_ADDRESS + 0x14);
 8000318:	4b10      	ldr	r3, [pc, #64]	@ (800035c <Led_control+0x50>)
 800031a:	60fb      	str	r3, [r7, #12]
	if(state == ON)
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d10a      	bne.n	8000338 <Led_control+0x2c>
		*GPIOD_ODR |= (1 << (12 + led_num));
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	320c      	adds	r2, #12
 800032a:	2101      	movs	r1, #1
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	431a      	orrs	r2, r3
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	601a      	str	r2, [r3, #0]
	else
		*GPIOD_ODR &= ~(1 << (12 + led_num));
}
 8000336:	e00a      	b.n	800034e <Led_control+0x42>
		*GPIOD_ODR &= ~(1 << (12 + led_num));
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	320c      	adds	r2, #12
 8000340:	2101      	movs	r1, #1
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	43d2      	mvns	r2, r2
 8000348:	401a      	ands	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]
}
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40020c14 	.word	0x40020c14

08000360 <EXTI0_IRQHandler>:
	// xu ly trong bo nvic
	uint32_t* NVIC_ISER0 = (uint32_t*)0xe000e100;
	*NVIC_ISER0 |= (1 << 6);
}

void EXTI0_IRQHandler(){
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
  __asm("NOP");
 8000366:	bf00      	nop
  uint32_t* PR = (uint32_t*)0x40013c14;
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <EXTI0_IRQHandler+0x24>)
 800036a:	607b      	str	r3, [r7, #4]
  *PR |= (1 << 0);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f043 0201 	orr.w	r2, r3, #1
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40013c14 	.word	0x40013c14

08000388 <USART2_IRQHandler>:
void custom_Handler(){
	uint32_t* PR = (uint32_t*)0x40013c14;
	 *PR |= (1 << 0);
}

void USART2_IRQHandler(){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
	uint32_t *DR = (uint32_t*) 0x40004404;
 800038e:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <USART2_IRQHandler+0x78>)
 8000390:	607b      	str	r3, [r7, #4]
	rx_buffer[rx_index] = *DR;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <USART2_IRQHandler+0x7c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	b2d1      	uxtb	r1, r2
 800039c:	4a1a      	ldr	r2, [pc, #104]	@ (8000408 <USART2_IRQHandler+0x80>)
 800039e:	54d1      	strb	r1, [r2, r3]
	rx_index++;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <USART2_IRQHandler+0x7c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3301      	adds	r3, #1
 80003a6:	4a17      	ldr	r2, [pc, #92]	@ (8000404 <USART2_IRQHandler+0x7c>)
 80003a8:	6013      	str	r3, [r2, #0]
	if(strstr(rx_buffer, "on")!= 0){
 80003aa:	4918      	ldr	r1, [pc, #96]	@ (800040c <USART2_IRQHandler+0x84>)
 80003ac:	4816      	ldr	r0, [pc, #88]	@ (8000408 <USART2_IRQHandler+0x80>)
 80003ae:	f000 f8db 	bl	8000568 <strstr>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d00c      	beq.n	80003d2 <USART2_IRQHandler+0x4a>
		Led_control(2, ON);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2002      	movs	r0, #2
 80003bc:	f7ff ffa6 	bl	800030c <Led_control>
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80003c0:	2280      	movs	r2, #128	@ 0x80
 80003c2:	2100      	movs	r1, #0
 80003c4:	4810      	ldr	r0, [pc, #64]	@ (8000408 <USART2_IRQHandler+0x80>)
 80003c6:	f000 f8c7 	bl	8000558 <memset>
		rx_index = 0;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <USART2_IRQHandler+0x7c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
	else if(strstr(rx_buffer, "off")!= 0){
			Led_control(2, OFF);
			memset(rx_buffer, 0, sizeof(rx_buffer));
			rx_index = 0;
	}
}
 80003d0:	e012      	b.n	80003f8 <USART2_IRQHandler+0x70>
	else if(strstr(rx_buffer, "off")!= 0){
 80003d2:	490f      	ldr	r1, [pc, #60]	@ (8000410 <USART2_IRQHandler+0x88>)
 80003d4:	480c      	ldr	r0, [pc, #48]	@ (8000408 <USART2_IRQHandler+0x80>)
 80003d6:	f000 f8c7 	bl	8000568 <strstr>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d00b      	beq.n	80003f8 <USART2_IRQHandler+0x70>
			Led_control(2, OFF);
 80003e0:	2101      	movs	r1, #1
 80003e2:	2002      	movs	r0, #2
 80003e4:	f7ff ff92 	bl	800030c <Led_control>
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80003e8:	2280      	movs	r2, #128	@ 0x80
 80003ea:	2100      	movs	r1, #0
 80003ec:	4806      	ldr	r0, [pc, #24]	@ (8000408 <USART2_IRQHandler+0x80>)
 80003ee:	f000 f8b3 	bl	8000558 <memset>
			rx_index = 0;
 80003f2:	4b04      	ldr	r3, [pc, #16]	@ (8000404 <USART2_IRQHandler+0x7c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
}
 80003f8:	bf00      	nop
 80003fa:	3708      	adds	r7, #8
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40004404 	.word	0x40004404
 8000404:	200000ac 	.word	0x200000ac
 8000408:	2000002c 	.word	0x2000002c
 800040c:	080005f4 	.word	0x080005f4
 8000410:	080005f8 	.word	0x080005f8

08000414 <DMA1_Stream5_IRQHandler>:
	uint32_t *NVIC_ISER0 = (uint32_t*)0xe000e100;
	*NVIC_ISER0 |= (1 << 16);

}

void DMA1_Stream5_IRQHandler (){
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
	__asm ("NOP");
 8000418:	bf00      	nop
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <main>:
	char data = *DR; // Read the DR register and it's cleared register at the same time
	return data;
}

int main()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	delay_init();
 8000428:	f7ff fed6 	bl	80001d8 <delay_init>
	Led_init();
 800042c:	f7ff ff0c 	bl	8000248 <Led_init>
	Button_init();
 8000430:	f7ff ff3e 	bl	80002b0 <Button_init>
  {
//	  // When to receive the Data, Data will save in the rx_buffer
//	  rx_buffer[rx_index]= UART_Recv_Byte();
//	  rx_index++;

	  Led_control(1, ON);
 8000434:	2100      	movs	r1, #0
 8000436:	2001      	movs	r0, #1
 8000438:	f7ff ff68 	bl	800030c <Led_control>
	  delay(1000);
 800043c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000440:	f7ff fee2 	bl	8000208 <delay>
	  Led_control(1, OFF);
 8000444:	2101      	movs	r1, #1
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff60 	bl	800030c <Led_control>
	  delay(1000);
 800044c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000450:	f7ff feda 	bl	8000208 <delay>
	  Led_control(1, ON);
 8000454:	bf00      	nop
 8000456:	e7ed      	b.n	8000434 <main+0x10>

08000458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <NMI_Handler+0x4>

08000460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <HardFault_Handler+0x4>

08000468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <MemManage_Handler+0x4>

08000470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <UsageFault_Handler+0x4>

08000480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ae:	f000 f83f 	bl	8000530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <SystemInit+0x20>)
 80004be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004c2:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <SystemInit+0x20>)
 80004c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004e0:	f7ff ffea 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e4:	480c      	ldr	r0, [pc, #48]	@ (8000518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004e6:	490d      	ldr	r1, [pc, #52]	@ (800051c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050a:	f000 f843 	bl	8000594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f7ff ff89 	bl	8000424 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000520:	08000604 	.word	0x08000604
  ldr r2, =_sbss
 8000524:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000528:	200000b4 	.word	0x200000b4

0800052c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC_IRQHandler>
	...

08000530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <HAL_IncTick+0x20>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	461a      	mov	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_IncTick+0x24>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4413      	add	r3, r2
 8000540:	4a04      	ldr	r2, [pc, #16]	@ (8000554 <HAL_IncTick+0x24>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000008 	.word	0x20000008
 8000554:	200000b0 	.word	0x200000b0

08000558 <memset>:
 8000558:	4402      	add	r2, r0
 800055a:	4603      	mov	r3, r0
 800055c:	4293      	cmp	r3, r2
 800055e:	d100      	bne.n	8000562 <memset+0xa>
 8000560:	4770      	bx	lr
 8000562:	f803 1b01 	strb.w	r1, [r3], #1
 8000566:	e7f9      	b.n	800055c <memset+0x4>

08000568 <strstr>:
 8000568:	780a      	ldrb	r2, [r1, #0]
 800056a:	b570      	push	{r4, r5, r6, lr}
 800056c:	b96a      	cbnz	r2, 800058a <strstr+0x22>
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	429a      	cmp	r2, r3
 8000572:	d109      	bne.n	8000588 <strstr+0x20>
 8000574:	460c      	mov	r4, r1
 8000576:	4605      	mov	r5, r0
 8000578:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f6      	beq.n	800056e <strstr+0x6>
 8000580:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000584:	429e      	cmp	r6, r3
 8000586:	d0f7      	beq.n	8000578 <strstr+0x10>
 8000588:	3001      	adds	r0, #1
 800058a:	7803      	ldrb	r3, [r0, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1ef      	bne.n	8000570 <strstr+0x8>
 8000590:	4618      	mov	r0, r3
 8000592:	e7ec      	b.n	800056e <strstr+0x6>

08000594 <__libc_init_array>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	4d0d      	ldr	r5, [pc, #52]	@ (80005cc <__libc_init_array+0x38>)
 8000598:	4c0d      	ldr	r4, [pc, #52]	@ (80005d0 <__libc_init_array+0x3c>)
 800059a:	1b64      	subs	r4, r4, r5
 800059c:	10a4      	asrs	r4, r4, #2
 800059e:	2600      	movs	r6, #0
 80005a0:	42a6      	cmp	r6, r4
 80005a2:	d109      	bne.n	80005b8 <__libc_init_array+0x24>
 80005a4:	4d0b      	ldr	r5, [pc, #44]	@ (80005d4 <__libc_init_array+0x40>)
 80005a6:	4c0c      	ldr	r4, [pc, #48]	@ (80005d8 <__libc_init_array+0x44>)
 80005a8:	f000 f818 	bl	80005dc <_init>
 80005ac:	1b64      	subs	r4, r4, r5
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	2600      	movs	r6, #0
 80005b2:	42a6      	cmp	r6, r4
 80005b4:	d105      	bne.n	80005c2 <__libc_init_array+0x2e>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005bc:	4798      	blx	r3
 80005be:	3601      	adds	r6, #1
 80005c0:	e7ee      	b.n	80005a0 <__libc_init_array+0xc>
 80005c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c6:	4798      	blx	r3
 80005c8:	3601      	adds	r6, #1
 80005ca:	e7f2      	b.n	80005b2 <__libc_init_array+0x1e>
 80005cc:	080005fc 	.word	0x080005fc
 80005d0:	080005fc 	.word	0x080005fc
 80005d4:	080005fc 	.word	0x080005fc
 80005d8:	08000600 	.word	0x08000600

080005dc <_init>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	bf00      	nop
 80005e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	469e      	mov	lr, r3
 80005e6:	4770      	bx	lr

080005e8 <_fini>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr
